# デコレータ
# 別の関数をデコレート(ラッピング)することで、デコレートされた関数を実行する前後にコードを実行できるようにする機能
# 他の関数の振る舞いを変更又は拡張するための、再利用可能な構成要素を定義できる
# そして、デコレートされた関数自体をそのために恒久的に書き換える必要がない

# デコレータは基本的に呼び出し可能オブジェクト
# 入力として呼び出し可能オブジェクトを受け取り、呼び出し可能オブジェクトを返す
def null_decorator(func):
    return func

# @構文を使用すると、関数が定義されるとすぐにデコレートされる
# そのため、デコレートされていない元の関数にアクセスするのは難しくなる
@null_decorator
def greet():
    return "Hello!"

# @構文は以下の糖衣構文
# def greet():
#     return "Hello!"
# greet = null_decorator(greet)

print(greet())
